var customProperty = {
  Object: {
    length: 'number',
    name: 'string',
    prototype: 'object',
    assign: 'function',
    getOwnPropertyDescriptor: 'function',
    getOwnPropertyDescriptors: 'function',
    getOwnPropertyNames: 'function',
    getOwnPropertySymbols: 'function',
    is: 'function',
    preventExtensions: 'function',
    seal: 'function',
    create: 'function',
    defineProperties: 'function',
    defineProperty: 'function',
    freeze: 'function',
    getPrototypeOf: 'function',
    setPrototypeOf: 'function',
    isExtensible: 'function',
    isFrozen: 'function',
    isSealed: 'function',
    keys: 'function',
    entries: 'function',
    values: 'function' 
  },
  Function: {
     length: 'number', 
     name: 'string', 
     prototype: 'function' },
  Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     isArray: 'function',
     from: 'function',
     of: 'function' },
  Number: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     isFinite: 'function',
     isInteger: 'function',
     isNaN: 'function',
     isSafeInteger: 'function',
     parseFloat: 'function',
     parseInt: 'function',
     MAX_VALUE: 'number',
     MIN_VALUE: 'number',
     NaN: 'number',
     NEGATIVE_INFINITY: 'number',
     POSITIVE_INFINITY: 'number',
     MAX_SAFE_INTEGER: 'number',
     MIN_SAFE_INTEGER: 'number',
     EPSILON: 'number' },
  parseFloat: { 
     length: 'number', 
     name: 'string' },
  parseInt: { 
     length: 'number', 
     name: 'string' },
  Infinity: {},
  NaN: {},
  undefined: false,
  Boolean: { 
     length: 'number', 
     name: 'string', 
     prototype: 'object' },
  String: {
     length: 'number',
     name: 'string',
     prototype: 'object',
     fromCharCode: 'function',
     fromCodePoint: 'function',
     raw: 'function' },
  Symbol: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     for: 'function',
     keyFor: 'function',
     hasInstance: 'symbol',
     isConcatSpreadable: 'symbol',
     iterator: 'symbol',
     match: 'symbol',
     replace: 'symbol',
     search: 'symbol',
     species: 'symbol',
     split: 'symbol',
     toPrimitive: 'symbol',
     toStringTag: 'symbol',
     unscopables: 'symbol' },
  Date: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     now: 'function',
     parse: 'function',
     UTC: 'function' },
  Promise: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     all: 'function',
     race: 'function',
     resolve: 'function',
     reject: 'function' },
  RegExp: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     input: 'string',
     '$_': 'string',
     lastMatch: 'string',
     '$&': 'string',
     lastParen: 'string',
     '$+': 'string',
     leftContext: 'string',
     '$`': 'string',
     rightContext: 'string',
     '$\'': 'string',
     '$1': 'string',
     '$2': 'string',
     '$3': 'string',
     '$4': 'string',
     '$5': 'string',
     '$6': 'string',
     '$7': 'string',
     '$8': 'string',
     '$9': 'string' },
  Error: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     captureStackTrace: 'function',
     stackTraceLimit: 'number' },
  EvalError: { 
     length: 'number', name: 'string', prototype: 'object' },
  RangeError: { 
     length: 'number', name: 'string', prototype: 'object' },
  ReferenceError: { 
     length: 'number', name: 'string', prototype: 'object' },
  SyntaxError: { 
     length: 'number', name: 'string', prototype: 'object' },
  TypeError: { 
     length: 'number', name: 'string', prototype: 'object' },
  URIError: {
     length: 'number', name: 'string', prototype: 'object' },
  JSON: { 
     parse: 'function', stringify: 'function' },
  Math: { 
     abs: 'function',
     acos: 'function',
     acosh: 'function',
     asin: 'function',
     asinh: 'function',
     atan: 'function',
     atanh: 'function',
     atan2: 'function',
     ceil: 'function',
     cbrt: 'function',
     expm1: 'function',
     clz32: 'function',
     cos: 'function',
     cosh: 'function',
     exp: 'function',
     floor: 'function',
     fround: 'function',
     hypot: 'function',
     imul: 'function',
     log: 'function',
     log1p: 'function',
     log2: 'function',
     log10: 'function',
     max: 'function',
     min: 'function',
     pow: 'function',
     random: 'function',
     round: 'function',
     sign: 'function',
     sin: 'function',
     sinh: 'function',
     sqrt: 'function',
     tan: 'function',
     tanh: 'function',
     trunc: 'function',
     E: 'number',
     LN10: 'number',
     LN2: 'number',
     LOG10E: 'number',
     LOG2E: 'number',
     PI: 'number',
     SQRT1_2: 'number',
     SQRT2: 'number' },
  console: { 
     _stdout: 'object',
     _stderr: 'object',
     _ignoreErrors: 'boolean',
     _times: 'object',
     _stdoutErrorHandler: 'function',
     _stderrErrorHandler: 'function',
     log: 'function',
     info: 'function',
     warn: 'function',
     error: 'function',
     dir: 'function',
     time: 'function',
     timeEnd: 'function',
     trace: 'function',
     assert: 'function',
     clear: 'function',
     count: 'function',
     countReset: 'function',
     group: 'function',
     groupCollapsed: 'function',
     groupEnd: 'function',
     Console: 'function' },
  ArrayBuffer: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     isView: 'function' },
  Uint8Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  Int8Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  Uint16Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  Int16Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  Uint32Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  Int32Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  Float32Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  Float64Array: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  Uint8ClampedArray: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     BYTES_PER_ELEMENT: 'number' },
  DataView: { 
     length: 'number', name: 'string', prototype: 'object' },
  Map: { 
     length: 'number', name: 'string', prototype: 'object' },
  Set: { 
     length: 'number', name: 'string', prototype: 'object' },
  WeakMap: { 
     length: 'number', name: 'string', prototype: 'object' },
  WeakSet: { 
     length: 'number', name: 'string', prototype: 'object' },
  Proxy: { 
     length: 'number',
     name: 'string',
     arguments: 'object',
     caller: 'object',
     revocable: 'function' },
  Reflect: { 
     defineProperty: 'function',
     deleteProperty: 'function',
     apply: 'function',
     construct: 'function',
     get: 'function',
     getOwnPropertyDescriptor: 'function',
     getPrototypeOf: 'function',
     has: 'function',
     isExtensible: 'function',
     ownKeys: 'function',
     preventExtensions: 'function',
     set: 'function',
     setPrototypeOf: 'function' },
  decodeURI: { 
     length: 'number', name: 'string' },
  decodeURIComponent: {
     length: 'number', name: 'string' },
  encodeURI: { 
     length: 'number', name: 'string' },
  encodeURIComponent: { 
     length: 'number', name: 'string' },
  escape: { 
     length: 'number', name: 'string' },
  unescape: { 
     length: 'number', name: 'string' },
  eval: { 
     length: 'number', name: 'string' },
  isFinite: { 
     length: 'number', name: 'string' },
  isNaN: { 
     length: 'number', name: 'string' },
  WebAssembly: { 
     compile: 'function',
     validate: 'function',
     instantiate: 'function',
     Module: 'function',
     Instance: 'function',
     Table: 'function',
     Memory: 'function',
     CompileError: 'function',
     LinkError: 'function',
     RuntimeError: 'function' },
  global: { 
     Object: 'function',
     Function: 'function',
     Array: 'function',
     Number: 'function',
     parseFloat: 'function',
     parseInt: 'function',
     Infinity: 'number',
     NaN: 'number',
     undefined: 'undefined',
     Boolean: 'function',
     String: 'function',
     Symbol: 'function',
     Date: 'function',
     Promise: 'function',
     RegExp: 'function',
     Error: 'function',
     EvalError: 'function',
     RangeError: 'function',
     ReferenceError: 'function',
     SyntaxError: 'function',
     TypeError: 'function',
     URIError: 'function',
     JSON: 'object',
     Math: 'object',
     console: 'object',
     ArrayBuffer: 'function',
     Uint8Array: 'function',
     Int8Array: 'function',
     Uint16Array: 'function',
     Int16Array: 'function',
     Uint32Array: 'function',
     Int32Array: 'function',
     Float32Array: 'function',
     Float64Array: 'function',
     Uint8ClampedArray: 'function',
     DataView: 'function',
     Map: 'function',
     Set: 'function',
     WeakMap: 'function',
     WeakSet: 'function',
     Proxy: 'function',
     Reflect: 'object',
     decodeURI: 'function',
     decodeURIComponent: 'function',
     encodeURI: 'function',
     encodeURIComponent: 'function',
     escape: 'function',
     unescape: 'function',
     eval: 'function',
     isFinite: 'function',
     isNaN: 'function',
     WebAssembly: 'object',
     global: 'object',
     process: 'object',
     GLOBAL: 'object',
     root: 'object',
     Buffer: 'function',
     clearImmediate: 'function',
     clearInterval: 'function',
     clearTimeout: 'function',
     setImmediate: 'function',
     setInterval: 'function',
     setTimeout: 'function',
     props: 'object',
     propsPrototype: 'object',
     propsProto: 'object',
     cc: 'number' },
  process: { 
     title: 'string',
     version: 'string',
     moduleLoadList: 'object',
     versions: 'object',
     _promiseRejectEvent: 'object',
     arch: 'string',
     platform: 'string',
     release: 'object',
     argv: 'object',
     execArgv: 'object',
     env: 'object',
     pid: 'number',
     features: 'object',
     _needImmediateCallback: 'boolean',
     execPath: 'string',
     debugPort: 'number',
     _startProfilerIdleNotifier: 'function',
     _stopProfilerIdleNotifier: 'function',
     _getActiveRequests: 'function',
     _getActiveHandles: 'function',
     reallyExit: 'function',
     abort: 'function',
     chdir: 'function',
     cwd: 'function',
     umask: 'function',
     _kill: 'function',
     _debugProcess: 'function',
     _debugPause: 'function',
     _debugEnd: 'function',
     hrtime: 'function',
     cpuUsage: 'function',
     dlopen: 'function',
     uptime: 'function',
     memoryUsage: 'function',
     binding: 'function',
     _linkedBinding: 'function',
     _setupDomainUse: 'function',
     _events: 'object',
     _rawDebug: 'function',
     _eventsCount: 'number',
     domain: 'object',
     _maxListeners: 'undefined',
     _fatalException: 'function',
     _exiting: 'boolean',
     assert: 'function',
     config: 'object',
     emitWarning: 'function',
     nextTick: 'function',
     _tickCallback: 'function',
     _tickDomainCallback: 'function',
     stdout: 'object',
     stderr: 'object',
     stdin: 'object',
     openStdin: 'function',
     exit: 'function',
     kill: 'function',
     argv0: 'string',
     mainModule: 'object' },
  GLOBAL: { 
     Object: 'function',
     Function: 'function',
     Array: 'function',
     Number: 'function',
     parseFloat: 'function',
     parseInt: 'function',
     Infinity: 'number',
     NaN: 'number',
     undefined: 'undefined',
     Boolean: 'function',
     String: 'function',
     Symbol: 'function',
     Date: 'function',
     Promise: 'function',
     RegExp: 'function',
     Error: 'function',
     EvalError: 'function',
     RangeError: 'function',
     ReferenceError: 'function',
     SyntaxError: 'function',
     TypeError: 'function',
     URIError: 'function',
     JSON: 'object',
     Math: 'object',
     console: 'object',
     ArrayBuffer: 'function',
     Uint8Array: 'function',
     Int8Array: 'function',
     Uint16Array: 'function',
     Int16Array: 'function',
     Uint32Array: 'function',
     Int32Array: 'function',
     Float32Array: 'function',
     Float64Array: 'function',
     Uint8ClampedArray: 'function',
     DataView: 'function',
     Map: 'function',
     Set: 'function',
     WeakMap: 'function',
     WeakSet: 'function',
     Proxy: 'function',
     Reflect: 'object',
     decodeURI: 'function',
     decodeURIComponent: 'function',
     encodeURI: 'function',
     encodeURIComponent: 'function',
     escape: 'function',
     unescape: 'function',
     eval: 'function',
     isFinite: 'function',
     isNaN: 'function',
     WebAssembly: 'object',
     global: 'object',
     process: 'object',
     GLOBAL: 'object',
     root: 'object',
     Buffer: 'function',
     clearImmediate: 'function',
     clearInterval: 'function',
     clearTimeout: 'function',
     setImmediate: 'function',
     setInterval: 'function',
     setTimeout: 'function',
     props: 'object',
     propsPrototype: 'object',
     propsProto: 'object',
     cc: 'number' },
  root: { 
     Object: 'function',
     Function: 'function',
     Array: 'function',
     Number: 'function',
     parseFloat: 'function',
     parseInt: 'function',
     Infinity: 'number',
     NaN: 'number',
     undefined: 'undefined',
     Boolean: 'function',
     String: 'function',
     Symbol: 'function',
     Date: 'function',
     Promise: 'function',
     RegExp: 'function',
     Error: 'function',
     EvalError: 'function',
     RangeError: 'function',
     ReferenceError: 'function',
     SyntaxError: 'function',
     TypeError: 'function',
     URIError: 'function',
     JSON: 'object',
     Math: 'object',
     console: 'object',
     ArrayBuffer: 'function',
     Uint8Array: 'function',
     Int8Array: 'function',
     Uint16Array: 'function',
     Int16Array: 'function',
     Uint32Array: 'function',
     Int32Array: 'function',
     Float32Array: 'function',
     Float64Array: 'function',
     Uint8ClampedArray: 'function',
     DataView: 'function',
     Map: 'function',
     Set: 'function',
     WeakMap: 'function',
     WeakSet: 'function',
     Proxy: 'function',
     Reflect: 'object',
     decodeURI: 'function',
     decodeURIComponent: 'function',
     encodeURI: 'function',
     encodeURIComponent: 'function',
     escape: 'function',
     unescape: 'function',
     eval: 'function',
     isFinite: 'function',
     isNaN: 'function',
     WebAssembly: 'object',
     global: 'object',
     process: 'object',
     GLOBAL: 'object',
     root: 'object',
     Buffer: 'function',
     clearImmediate: 'function',
     clearInterval: 'function',
     clearTimeout: 'function',
     setImmediate: 'function',
     setInterval: 'function',
     setTimeout: 'function',
     props: 'object',
     propsPrototype: 'object',
     propsProto: 'object',
     cc: 'number' },
  Buffer: { 
     length: 'number',
     name: 'string',
     prototype: 'object',
     poolSize: 'number',
     from: 'function',
     alloc: 'function',
     allocUnsafe: 'function',
     allocUnsafeSlow: 'function',
     isBuffer: 'function',
     compare: 'function',
     isEncoding: 'function',
     concat: 'function',
     byteLength: 'function' },
  clearImmediate: { 
     length: 'number', 
     name: 'string', 
     prototype: 'object' },
  clearInterval: { 
     length: 'number', 
     name: 'string', 
     prototype: 'object' },
  clearTimeout: { 
     length: 'number', 
     name: 'string', 
     prototype: 'object' },
  setImmediate: { 
     length: 'number', 
     name: 'string', 
     prototype: 'object' },
  setInterval: { 
     length: 'number', 
     name: 'string', 
     prototype: 'object' },
  setTimeout: { 
     length: 'number', 
     name: 'string', 
     prototype: 'object' 
  }
}

var customPrototype = { 
  Object:{ 
    constructor: 'function',
    __defineGetter__: 'function',
    __defineSetter__: 'function',
    hasOwnProperty: 'function',
    __lookupGetter__: 'function',
    __lookupSetter__: 'function',
    isPrototypeOf: 'function',
    propertyIsEnumerable: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function'
  },
  Function: { 
    length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function'
  },
  Array: { 
    length: 'number',
    constructor: 'function',
    concat: 'function',
    find: 'function',
    findIndex: 'function',
    pop: 'function',
    push: 'function',
    shift: 'function',
    unshift: 'function',
    slice: 'function',
    splice: 'function',
    includes: 'function',
    indexOf: 'function',
    keys: 'function',
    entries: 'function',
    forEach: 'function',
    filter: 'function',
    map: 'function',
    every: 'function',
    some: 'function',
    reduce: 'function',
    reduceRight: 'function',
    toString: 'function',
    toLocaleString: 'function',
    join: 'function',
    reverse: 'function',
    sort: 'function',
    lastIndexOf: 'function',
    copyWithin: 'function',
    fill: 'function',
    values: 'function'
  },
  Number: {
    constructor: 'function',
    toExponential: 'function',
    toFixed: 'function',
    toPrecision: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function'
  },
  parseFloat: false,
  parseInt: false,
  Infinity: false,
  NaN: false,
  undefined: false,
  Boolean: {
    constructor: 'function',
    toString: 'function',
    valueOf: 'function' 
  },
  String: { 
    length: 'number',
    constructor: 'function',
    anchor: 'function',
    big: 'function',
    blink: 'function',
    bold: 'function',
    charAt: 'function',
    charCodeAt: 'function',
    codePointAt: 'function',
    concat: 'function',
    endsWith: 'function',
    fontcolor: 'function',
    fontsize: 'function',
    fixed: 'function',
    includes: 'function',
    indexOf: 'function',
    italics: 'function',
    lastIndexOf: 'function',
    link: 'function',
    localeCompare: 'function',
    match: 'function',
    normalize: 'function',
    padEnd: 'function',
    padStart: 'function',
    repeat: 'function',
    replace: 'function',
    search: 'function',
    slice: 'function',
    small: 'function',
    split: 'function',
    strike: 'function',
    sub: 'function',
    substr: 'function',
    substring: 'function',
    sup: 'function',
    startsWith: 'function',
    toString: 'function',
    trim: 'function',
    trimLeft: 'function',
    trimRight: 'function',
    toLowerCase: 'function',
    toUpperCase: 'function',
    valueOf: 'function',
    toLocaleLowerCase: 'function',
    toLocaleUpperCase: 'function',
    trimStart: 'function',
    trimEnd: 'function' 
  },
  Symbol: { 
    Wconstructor: 'function',
    toString: 'function',
    valueOf: 'function'
  },
  Date: { 
    constructor: 'function',
    toString: 'function',
    toDateString: 'function',
    toTimeString: 'function',
    toISOString: 'function',
    toUTCString: 'function',
    toGMTString: 'function',
    getDate: 'function',
    setDate: 'function',
    getDay: 'function',
    getFullYear: 'function',
    setFullYear: 'function',
    getHours: 'function',
    setHours: 'function',
    getMilliseconds: 'function',
    setMilliseconds: 'function',
    getMinutes: 'function',
    setMinutes: 'function',
    getMonth: 'function',
    setMonth: 'function',
    getSeconds: 'function',
    setSeconds: 'function',
    getTime: 'function',
    setTime: 'function',
    getTimezoneOffset: 'function',
    getUTCDate: 'function',
    setUTCDate: 'function',
    getUTCDay: 'function',
    getUTCFullYear: 'function',
    setUTCFullYear: 'function',
    getUTCHours: 'function',
    setUTCHours: 'function',
    getUTCMilliseconds: 'function',
    setUTCMilliseconds: 'function',
    getUTCMinutes: 'function',
    setUTCMinutes: 'function',
    getUTCMonth: 'function',
    setUTCMonth: 'function',
    getUTCSeconds: 'function',
    setUTCSeconds: 'function',
    valueOf: 'function',
    getYear: 'function',
    setYear: 'function',
    toJSON: 'function',
    toLocaleString: 'function',
    toLocaleDateString: 'function',
    toLocaleTimeString: 'function'
  },
  Promise: {
    constructor: 'function',
    then: 'function',
    catch: 'function',
    finally: 'function'
  },
  RegExp: {
    constructor: 'function',
    exec: 'function',
    dotAll: 'undefined',
    flags: 'string',
    global: 'undefined',
    ignoreCase: 'undefined',
    multiline: 'undefined',
    source: 'string',
    sticky: 'undefined',
    unicode: 'undefined',
    compile: 'function',
    toString: 'function',
    test: 'function'
  },
  Error: {
    constructor: 'function',
    name: 'string',
    message: 'string',
    toString: 'function'
  },
  EvalError: { 
    constructor: 'function',
    name: 'string',
    message: 'string',
    toString: 'function'
  },
  RangeError:
   { constructor: 'function',
     name: 'string',
     message: 'string',
     toString: 'function' },
  ReferenceError:
   { constructor: 'function',
     name: 'string',
     message: 'string',
     toString: 'function' },
  SyntaxError:
   { constructor: 'function',
     name: 'string',
     message: 'string',
     toString: 'function' },
  TypeError:
   { constructor: 'function',
     name: 'string',
     message: 'string',
     toString: 'function' },
  URIError:
   { constructor: 'function',
     name: 'string',
     message: 'string',
     toString: 'function' },
  JSON: false,
  Math: false,
  console: false,
  Intl: false,
  ArrayBuffer:
   { constructor: 'function', byteLength: false, slice: 'function' },
  Uint8Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  Int8Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  Uint16Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  Int16Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  Uint32Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  Int32Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  Float32Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  Float64Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  Uint8ClampedArray: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  BigUint64Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  BigInt64Array: { constructor: 'function', BYTES_PER_ELEMENT: 'number' },
  DataView: {
    constructor: 'function',
    buffer: false,
    byteLength: false,
    byteOffset: false,
    getInt8: 'function',
    setInt8: 'function',
    getUint8: 'function',
    setUint8: 'function',
    getInt16: 'function',
    setInt16: 'function',
    getUint16: 'function',
    setUint16: 'function',
    getInt32: 'function',
    setInt32: 'function',
    getUint32: 'function',
    setUint32: 'function',
    getFloat32: 'function',
    setFloat32: 'function',
    getFloat64: 'function',
    setFloat64: 'function',
    getBigInt64: 'function',
    setBigInt64: 'function',
    getBigUint64: 'function',
    setBigUint64: 'function'
  },
  Map: {
    constructor: 'function',
    get: 'function',
    set: 'function',
    has: 'function',
    delete: 'function',
    clear: 'function',
    entries: 'function',
    forEach: 'function',
    keys: 'function',
    size: false,
    values: 'function' 
  },
  Set: {
    constructor: 'function',
    has: 'function',
    add: 'function',
    delete: 'function',
    clear: 'function',
    entries: 'function',
    forEach: 'function',
    size: false,
    values: 'function',
    keys: 'function' 
  },
  WeakMap: {
    constructor: 'function',
    delete: 'function',
    get: 'function',
    has: 'function',
    set: 'function' 
  },
  WeakSet: { 
    constructor: 'function',
    delete: 'function',
    has: 'function',
    add: 'function' 
  },
  Proxy: false,
  Reflect: false,
  decodeURI: false,
  decodeURIComponent: false,
  encodeURI: false,
  encodeURIComponent: false,
  escape: false,
  unescape: false,
  eval: false,
  isFinite: false,
  isNaN: false,
  SharedArrayBuffer:
   { constructor: 'function', byteLength: false, slice: 'function' },
  Atomics: false,
  BigInt: {
    constructor: 'function',
    toLocaleString: 'function',
    toString: 'function',
    valueOf: 'function' 
  },
  WebAssembly: false,
  DTRACE_NET_SERVER_CONNECTION: { constructor: 'function' },
  DTRACE_NET_STREAM_END: { constructor: 'function' },
  DTRACE_HTTP_SERVER_REQUEST: { constructor: 'function' },
  DTRACE_HTTP_SERVER_RESPONSE: { constructor: 'function' },
  DTRACE_HTTP_CLIENT_REQUEST: { constructor: 'function' },
  DTRACE_HTTP_CLIENT_RESPONSE: { constructor: 'function' },
  COUNTER_NET_SERVER_CONNECTION: { constructor: 'function' },
  COUNTER_NET_SERVER_CONNECTION_CLOSE: { constructor: 'function' },
  COUNTER_HTTP_SERVER_REQUEST: { constructor: 'function' },
  COUNTER_HTTP_SERVER_RESPONSE: { constructor: 'function' },
  COUNTER_HTTP_CLIENT_REQUEST: { constructor: 'function' },
  COUNTER_HTTP_CLIENT_RESPONSE: { constructor: 'function' },
  global: false,
  process: false,
  GLOBAL: false,
  root: false,
  Buffer: { 
    constructor: 'function',
    readUIntLE: 'function',
    readUInt32LE: 'function',
    readUInt16LE: 'function',
    readUInt8: 'function',
    readUIntBE: 'function',
    readUInt32BE: 'function',
    readUInt16BE: 'function',
    readIntLE: 'function',
    readInt32LE: 'function',
    readInt16LE: 'function',
    readInt8: 'function',
    readIntBE: 'function',
    readInt32BE: 'function',
    readInt16BE: 'function',
    writeUIntLE: 'function',
    writeUInt32LE: 'function',
    writeUInt16LE: 'function',
    writeUInt8: 'function',
    writeUIntBE: 'function',
    writeUInt32BE: 'function',
    writeUInt16BE: 'function',
    writeIntLE: 'function',
    writeInt32LE: 'function',
    writeInt16LE: 'function',
    writeInt8: 'function',
    writeIntBE: 'function',
    writeInt32BE: 'function',
    writeInt16BE: 'function',
    readFloatLE: 'function',
    readFloatBE: 'function',
    readDoubleLE: 'function',
    readDoubleBE: 'function',
    writeFloatLE: 'function',
    writeFloatBE: 'function',
    writeDoubleLE: 'function',
    writeDoubleBE: 'function',
    asciiSlice: 'function',
    base64Slice: 'function',
    latin1Slice: 'function',
    hexSlice: 'function',
    ucs2Slice: 'function',
    utf8Slice: 'function',
    asciiWrite: 'function',
    base64Write: 'function',
    latin1Write: 'function',
    hexWrite: 'function',
    ucs2Write: 'function',
    utf8Write: 'function',
    parent: 'undefined',
    offset: 'undefined',
    copy: 'function',
    toString: 'function',
    equals: 'function',
    inspect: 'function',
    compare: 'function',
    indexOf: 'function',
    lastIndexOf: 'function',
    includes: 'function',
    fill: 'function',
    write: 'function',
    toJSON: 'function',
    slice: 'function',
    swap16: 'function',
    swap32: 'function',
    swap64: 'function',
    toLocaleString: 'function'
  },
  clearImmediate: { constructor: 'function' },
  clearInterval: { constructor: 'function' },
  clearTimeout: { constructor: 'function' },
  setImmediate: { constructor: 'function' },
  setInterval: { constructor: 'function' },
  setTimeout: { constructor: 'function' },
  URL: {
    constructor: 'function',
    toString: 'function',
    href: false,
    origin: false,
    protocol: false,
    username: false,
    password: false,
    host: false,
    hostname: false,
    port: false,
    pathname: false,
    search: false,
    searchParams: 'undefined',
    hash: false,
    toJSON: 'function'
  },
  URLSearchParams: {
    constructor: 'function',
    append: 'function',
    delete: 'function',
    get: 'function',
    getAll: 'function',
    has: 'function',
    set: 'function',
    sort: 'function',
    entries: 'function',
    forEach: 'function',
    keys: 'function',
    values: 'function',
    toString: 'function'
  },
  props: false
}

var customProto = { 
  Object: {
    length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function'
  },
 Function: { 
    length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function'
  },
 Array:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Number:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 parseFloat:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 parseInt:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Infinity:
  { constructor: 'function',
    toExponential: 'function',
    toFixed: 'function',
    toPrecision: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function' },
 NaN:
  { constructor: 'function',
    toExponential: 'function',
    toFixed: 'function',
    toPrecision: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function' },
 undefined: false,
 Boolean:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 String:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Symbol:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Date:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Promise:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 RegExp:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Error:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 EvalError:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    captureStackTrace: 'function',
    stackTraceLimit: 'number' },
 RangeError:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    captureStackTrace: 'function',
    stackTraceLimit: 'number' },
 ReferenceError:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    captureStackTrace: 'function',
    stackTraceLimit: 'number' },
 SyntaxError:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    captureStackTrace: 'function',
    stackTraceLimit: 'number' },
 TypeError:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    captureStackTrace: 'function',
    stackTraceLimit: 'number' },
 URIError:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    captureStackTrace: 'function',
    stackTraceLimit: 'number' },
 JSON:
  { constructor: 'function',
    __defineGetter__: 'function',
    __defineSetter__: 'function',
    hasOwnProperty: 'function',
    __lookupGetter__: 'function',
    __lookupSetter__: 'function',
    isPrototypeOf: 'function',
    propertyIsEnumerable: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function' },
 Math:
  { constructor: 'function',
    __defineGetter__: 'function',
    __defineSetter__: 'function',
    hasOwnProperty: 'function',
    __lookupGetter__: 'function',
    __lookupSetter__: 'function',
    isPrototypeOf: 'function',
    propertyIsEnumerable: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function' },
    console: { 
      constructor: 'function',
      log: 'function',
      debug: 'function',
      info: 'function',
      dirxml: 'function',
      warn: 'function',
      error: 'function',
      dir: 'function',
      time: 'function',
      timeEnd: 'function',
      timeLog: 'function',
      trace: 'function',
      assert: 'function',
      clear: 'function',
      count: 'function',
      countReset: 'function',
      group: 'function',
      groupCollapsed: 'function',
      groupEnd: 'function',
      table: 'function'
  },
  Intl:
  { constructor: 'function',
    __defineGetter__: 'function',
    __defineSetter__: 'function',
    hasOwnProperty: 'function',
    __lookupGetter__: 'function',
    __lookupSetter__: 'function',
    isPrototypeOf: 'function',
    propertyIsEnumerable: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function' },
 ArrayBuffer:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Uint8Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 Int8Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 Uint16Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 Int16Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 Uint32Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 Int32Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 Float32Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 Float64Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 Uint8ClampedArray:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 BigUint64Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 BigInt64Array:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    of: 'function',
    from: 'function' },
 DataView:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Map:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Set:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 WeakMap:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 WeakSet:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Proxy:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Reflect:
  { constructor: 'function',
    __defineGetter__: 'function',
    __defineSetter__: 'function',
    hasOwnProperty: 'function',
    __lookupGetter__: 'function',
    __lookupSetter__: 'function',
    isPrototypeOf: 'function',
    propertyIsEnumerable: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function' },
 decodeURI:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 decodeURIComponent:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 encodeURI:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 encodeURIComponent:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 escape:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 unescape:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 eval:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 isFinite:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 isNaN:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 SharedArrayBuffer:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 Atomics:
  { constructor: 'function',
    __defineGetter__: 'function',
    __defineSetter__: 'function',
    hasOwnProperty: 'function',
    __lookupGetter__: 'function',
    __lookupSetter__: 'function',
    isPrototypeOf: 'function',
    propertyIsEnumerable: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function' },
 BigInt:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 WebAssembly:
  { constructor: 'function',
    __defineGetter__: 'function',
    __defineSetter__: 'function',
    hasOwnProperty: 'function',
    __lookupGetter__: 'function',
    __lookupSetter__: 'function',
    isPrototypeOf: 'function',
    propertyIsEnumerable: 'function',
    toString: 'function',
    valueOf: 'function',
    toLocaleString: 'function' },
 DTRACE_NET_SERVER_CONNECTION:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 DTRACE_NET_STREAM_END:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 DTRACE_HTTP_SERVER_REQUEST:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 DTRACE_HTTP_SERVER_RESPONSE:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 DTRACE_HTTP_CLIENT_REQUEST:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 DTRACE_HTTP_CLIENT_RESPONSE:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 COUNTER_NET_SERVER_CONNECTION:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 COUNTER_NET_SERVER_CONNECTION_CLOSE:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 COUNTER_HTTP_SERVER_REQUEST:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 COUNTER_HTTP_SERVER_RESPONSE:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 COUNTER_HTTP_CLIENT_REQUEST:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 COUNTER_HTTP_CLIENT_RESPONSE:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 global: { constructor: 'function' },
 process: { constructor: 'function' },
 GLOBAL: { constructor: 'function' },
 root: { constructor: 'function' },
 Buffer:
  { length: 'number',
    name: 'string',
    prototype: 'object',
    BYTES_PER_ELEMENT: 'number' },
 clearImmediate:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 clearInterval:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 clearTimeout:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 setImmediate:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 setInterval:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
 setTimeout:
  { length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function' },
  URL: {
    length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function'
  },
  URLSearchParams: {
    length: 'number',
    name: 'string',
    arguments: false,
    caller: false,
    constructor: 'function',
    apply: 'function',
    bind: 'function',
    call: 'function',
    toString: 'function'
  },
  props: {
    length: 'number',
    constructor: 'function',
    concat: 'function',
    find: 'function',
    findIndex: 'function',
    pop: 'function',
    push: 'function',
    shift: 'function',
    unshift: 'function',
    slice: 'function',
    splice: 'function',
    includes: 'function',
    indexOf: 'function',
    keys: 'function',
    entries: 'function',
    forEach: 'function',
    filter: 'function',
    map: 'function',
    every: 'function',
    some: 'function',
    reduce: 'function',
    reduceRight: 'function',
    toString: 'function',
    toLocaleString: 'function',
    join: 'function',
    reverse: 'function',
    sort: 'function',
    lastIndexOf: 'function',
    copyWithin: 'function',
    fill: 'function',
    values: 'function'
  },
  propsPrototype: {
    length: 'number',
    constructor: 'function',
    concat: 'function',
    find: 'function',
    findIndex: 'function',
    pop: 'function',
    push: 'function',
    shift: 'function',
    unshift: 'function',
    slice: 'function',
    splice: 'function',
    includes: 'function',
    indexOf: 'function',
    keys: 'function',
    entries: 'function',
    forEach: 'function',
    filter: 'function',
    map: 'function',
    every: 'function',
    some: 'function',
    reduce: 'function',
    reduceRight: 'function',
    toString: 'function',
    toLocaleString: 'function',
    join: 'function',
    reverse: 'function',
    sort: 'function',
    lastIndexOf: 'function',
    copyWithin: 'function',
    fill: 'function',
    values: 'function' 
  }
}

var customProtoDeep = {
  constructor: {
    length: 'number',
    name: 'string',
    prototype: 'object',
    assign: 'function',
    getOwnPropertyDescriptor: 'function',
    getOwnPropertyDescriptors: 'function',
    getOwnPropertyNames: 'function',
    getOwnPropertySymbols: 'function',
    is: 'function',
    preventExtensions: 'function',
    seal: 'function',
    create: 'function',
    defineProperties: 'function',
    defineProperty: 'function',
    freeze: 'function',
    getPrototypeOf: 'function',
    setPrototypeOf: 'function',
    isExtensible: 'function',
    isFrozen: 'function',
    isSealed: 'function',
    keys: 'function',
    entries: 'function',
    values: 'function' 
  }
}