var theOutput = (function iifeEnvDetect(){
  var output = false;
  if ( typeof global !== 'undefined' && typeof module !== 'undefined' && typeof require !== 'undefined' ) {
    if ( require.main === module ) {
      output = 'node';      
    } else {
      output = 'node-module';
    }
  }

  if ( typeof window !== 'undefined' && typeof document !== 'undefined' ) {
    output = 'browser';
    if ( typeof require === 'undefined' ) {
      //require = function( value ) { console.log("%c TO REQUIRE : " + value,"color: ##FF0000;"); }
      require = function( value ) { console.log("TO REQUIRE : " + value); }
    }
  }
  return output;
})();

var filename = typeof __filename !== 'undefined' ? __filename : 'browser';

console.log(theOutput, filename);

var log = console.log;

var checkNodeGLobalProperties = [
  'Object',
  'Function',
  'Array',
  'Number',
  'parseFloat',
  'parseInt',
  'Infinity',
  'NaN',
  'undefined',
  'Boolean',
  'String',
  'Symbol',
  'Date',
  'Promise',
  'RegExp',
  'Error',
  'EvalError',
  'RangeError',
  'ReferenceError',
  'SyntaxError',
  'TypeError',
  'URIError',
  'JSON',
  'Math',
  'console',
  'ArrayBuffer',
  'Uint8Array',
  'Int8Array',
  'Uint16Array',
  'Int16Array',
  'Uint32Array',
  'Int32Array',
  'Float32Array',
  'Float64Array',
  'Uint8ClampedArray',
  'DataView',
  'Map',
  'Set',
  'WeakMap',
  'WeakSet',
  'Proxy',
  'Reflect',
  'decodeURI',
  'decodeURIComponent',
  'encodeURI',
  'encodeURIComponent',
  'escape',
  'unescape',
  'eval',
  'isFinite',
  'isNaN',
  'WebAssembly',
  'global',         // node specific
  'process',        // node specific
  //'GLOBAL', // deprecated, node specific
  //'root',   // deprecated, node specific
  'Buffer',         // node specific
  'clearImmediate', // node specific
  'clearInterval',
  'clearTimeout',
  'setImmediate',   // node specific
  'setInterval',
  'setTimeout'
];

var checkNodeBrowserCommonProperties = [
  'Object',
  'Function',
  'Array',
  'Number',
  'parseFloat',
  'parseInt',
  'Infinity',
  'NaN',
  'undefined',
  'Boolean',
  'String',
  'Symbol',
  'Date',
  'Promise',
  'RegExp',
  'Error',
  'EvalError',
  'RangeError',
  'ReferenceError',
  'SyntaxError',
  'TypeError',
  'URIError',
  'JSON',
  'Math',
  'console',
  'ArrayBuffer',
  'Uint8Array',
  'Int8Array',
  'Uint16Array',
  'Int16Array',
  'Uint32Array',
  'Int32Array',
  'Float32Array',
  'Float64Array',
  'Uint8ClampedArray',
  'DataView',
  'Map',
  'Set',
  'WeakMap',
  'WeakSet',
  'Proxy',
  'Reflect',
  'decodeURI',
  'decodeURIComponent',
  'encodeURI',
  'encodeURIComponent',
  'escape',
  'unescape',
  'eval',
  'isFinite',
  'isNaN',
  'WebAssembly',
  //'global',         // node specific
  //'process',        // node specific
  //'GLOBAL', // deprecated, node specific
  //'root',   // deprecated, node specific
  //'Buffer',         // node specific
  //'clearImmediate', // node specific
  'clearInterval',
  'clearTimeout',
  //'setImmediate',   // node specific
  'setInterval',
  'setTimeout'
];

if ( typeof global !== 'undefined' ) {
  //*
  var _jsdom = require('jsdom');
  var { JSDOM } = _jsdom;
  var dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`);

  //log(Object.prototype === _jsdom.__proto__);
  //log(Object.getOwnPropertyNames( dom.__proto__ ));

  //Object.getOwnPropertyNames( dom.window ).forEach(function each(value){
  //  console.log('"' + value + '",');
  //});

  //console.log(dom.window);
}

var checkObjectprotoProperties = [
'length',
'name',
'arguments',
'caller',
'constructor',
'apply',
'bind',
'call',
'toString'
];

var checkObjectprototypeProperties = [
'constructor',
'__defineGetter__',
'__defineSetter__',
'hasOwnProperty',
'__lookupGetter__',
'__lookupSetter__',
'isPrototypeOf',
'propertyIsEnumerable',
'toString',
'valueOf',
'__proto__',
'toLocaleString'
];

// _jsdom
var checkJSDOMproperties = [
'JSDOM',
'VirtualConsole',
'CookieJar',
'ResourceLoader',
'toughCookie'
];

var checkJSDOMprotoProperties = [
'constructor',
'__defineGetter__',
'__defineSetter__',
'hasOwnProperty',
'__lookupGetter__',
'__lookupSetter__',
'isPrototypeOf',
'propertyIsEnumerable',
'toString',
'valueOf',
'__proto__',
'toLocaleString'
];

var checkJSDOM_JSDOMproperties = [
'length',
'prototype',
'fragment',
'fromURL',
'fromFile',
'name'
];

var checkJSDOMdomProtoProperties = [
'constructor',
'window',
'virtualConsole',
'cookieJar',
'serialize',
'nodeLocation',
'runVMScript',
'reconfigure'
];

var checkJSDOMdomWindowProperties = [
"_proxyWindowEventsToWindow",
"onafterprint",
"onbeforeprint",
"onbeforeunload",
"onhashchange",
"onlanguagechange",
"onmessage",
"onmessageerror",
"onoffline",
"ononline",
"onpagehide",
"onpageshow",
"onpopstate",
"onrejectionhandled",
"onstorage",
"onunhandledrejection",
"onunload",
"onblur",
"onerror",
"onfocus",
"onload",
"onresize",
"onscroll",
"_initGlobalEvents",
"_getEventHandlerTarget",
"_getEventHandlerFor",
"_setEventHandlerFor",
"_globalEventChanged",
"onabort",
"onautocomplete",
"onautocompleteerror",
"oncancel",
"oncanplay",
"oncanplaythrough",
"onchange",
"onclick",
"onclose",
"oncontextmenu",
"oncuechange",
"ondblclick",
"ondrag",
"ondragend",
"ondragenter",
"ondragexit",
"ondragleave",
"ondragover",
"ondragstart",
"ondrop",
"ondurationchange",
"onemptied",
"onended",
"oninput",
"oninvalid",
"onkeydown",
"onkeypress",
"onkeyup",
"onloadeddata",
"onloadedmetadata",
"onloadstart",
"onmousedown",
"onmouseenter",
"onmouseleave",
"onmousemove",
"onmouseout",
"onmouseover",
"onmouseup",
"onwheel",
"onpause",
"onplay",
"onplaying",
"onprogress",
"onratechange",
"onreset",
"onsecuritypolicyviolation",
"onseeked",
"onseeking",
"onselect",
"onsort",
"onstalled",
"onsubmit",
"onsuspend",
"ontimeupdate",
"ontoggle",
"onvolumechange",
"onwaiting",
"_registeredHandlers",
"_eventHandlers",
"DOMException",
"NamedNodeMap",
"Attr",
"Node",
"Element",
"DocumentFragment",
"HTMLDocument",
"Document",
"XMLDocument",
"CharacterData",
"Text",
"CDATASection",
"ProcessingInstruction",
"Comment",
"DocumentType",
"DOMImplementation",
"NodeList",
"HTMLCollection",
"HTMLOptionsCollection",
"DOMStringMap",
"DOMTokenList",
"SVGAnimatedString",
"SVGNumber",
"SVGStringList",
"Event",
"CloseEvent",
"CustomEvent",
"MessageEvent",
"ErrorEvent",
"HashChangeEvent",
"InputEvent",
"FocusEvent",
"PopStateEvent",
"UIEvent",
"MouseEvent",
"KeyboardEvent",
"TouchEvent",
"ProgressEvent",
"StorageEvent",
"CompositionEvent",
"WheelEvent",
"EventTarget",
"BarProp",
"Location",
"History",
"Screen",
"Performance",
"Blob",
"File",
"FileList",
"ValidityState",
"DOMParser",
"XMLSerializer",
"FormData",
"XMLHttpRequestEventTarget",
"XMLHttpRequestUpload",
"NodeIterator",
"TreeWalker",
"Storage",
"ShadowRoot",
"HTMLElement",
"HTMLAnchorElement",
"HTMLAreaElement",
"HTMLAudioElement",
"HTMLBaseElement",
"HTMLBodyElement",
"HTMLBRElement",
"HTMLButtonElement",
"HTMLCanvasElement",
"HTMLDataElement",
"HTMLDataListElement",
"HTMLDetailsElement",
"HTMLDialogElement",
"HTMLDirectoryElement",
"HTMLDivElement",
"HTMLDListElement",
"HTMLEmbedElement",
"HTMLFieldSetElement",
"HTMLFontElement",
"HTMLFormElement",
"HTMLFrameElement",
"HTMLFrameSetElement",
"HTMLHeadingElement",
"HTMLHeadElement",
"HTMLHRElement",
"HTMLHtmlElement",
"HTMLIFrameElement",
"HTMLImageElement",
"HTMLInputElement",
"HTMLLabelElement",
"HTMLLegendElement",
"HTMLLIElement",
"HTMLLinkElement",
"HTMLMapElement",
"HTMLMarqueeElement",
"HTMLMediaElement",
"HTMLMenuElement",
"HTMLMetaElement",
"HTMLMeterElement",
"HTMLModElement",
"HTMLObjectElement",
"HTMLOListElement",
"HTMLOptGroupElement",
"HTMLOptionElement",
"HTMLOutputElement",
"HTMLParagraphElement",
"HTMLParamElement",
"HTMLPictureElement",
"HTMLPreElement",
"HTMLProgressElement",
"HTMLQuoteElement",
"HTMLScriptElement",
"HTMLSelectElement",
"HTMLSlotElement",
"HTMLSourceElement",
"HTMLSpanElement",
"HTMLStyleElement",
"HTMLTableCaptionElement",
"HTMLTableCellElement",
"HTMLTableColElement",
"HTMLTableElement",
"HTMLTimeElement",
"HTMLTitleElement",
"HTMLTableRowElement",
"HTMLTableSectionElement",
"HTMLTemplateElement",
"HTMLTextAreaElement",
"HTMLTrackElement",
"HTMLUListElement",
"HTMLUnknownElement",
"HTMLVideoElement",
"SVGElement",
"SVGGraphicsElement",
"SVGSVGElement",
"StyleSheet",
"MediaList",
"CSSStyleSheet",
"CSSRule",
"CSSStyleRule",
"CSSMediaRule",
"CSSImportRule",
"CSSStyleDeclaration",
"StyleSheetList",
"XPathException",
"XPathExpression",
"XPathResult",
"XPathEvaluator",
"NodeFilter",
"URL",
"URLSearchParams",
"Window",
"_resourceLoader",
"_globalProxy",
"_document",
"_sessionHistory",
"_virtualConsole",
"_runScripts",
"_top",
"_parent",
"_frameElement",
"_length",
"_pretendToBeVisual",
"_storageQuota",
"_commonForOrigin",
"_currentOriginData",
"_localStorage",
"_sessionStorage",
"length",
"window",
"frameElement",
"frames",
"self",
"parent",
"top",
"document",
"external",
"location",
"history",
"navigator",
"locationbar",
"menubar",
"personalbar",
"scrollbars",
"statusbar",
"toolbar",
"performance",
"screen",
"localStorage",
"sessionStorage",
"addEventListener",
"removeEventListener",
"dispatchEvent",
"setTimeout",
"setInterval",
"clearInterval",
"clearTimeout",
"__stopAllTimers",
"Option",
"Image",
"Audio",
"postMessage",
"atob",
"btoa",
"FileReader",
"WebSocket",
"AbortSignal",
"AbortController",
"XMLHttpRequest",
"ArrayBuffer",
"Int8Array",
"Uint8Array",
"Uint8ClampedArray",
"Int16Array",
"Uint16Array",
"Int32Array",
"Uint32Array",
"Float32Array",
"Float64Array",
"stop",
"close",
"getComputedStyle",
"captureEvents",
"releaseEvents",
"console",
"name",
"status",
"devicePixelRatio",
"innerWidth",
"innerHeight",
"outerWidth",
"outerHeight",
"pageXOffset",
"pageYOffset",
"screenX",
"screenY",
"scrollX",
"scrollY",
"screenLeft",
"screenTop",
"alert",
"blur",
"confirm",
"focus",
"moveBy",
"moveTo",
"open",
"print",
"prompt",
"resizeBy",
"resizeTo",
"scroll",
"scrollBy",
"scrollTo"
];

var checkJSDOMdomWindowBrowserCommonProperties = [
//"_proxyWindowEventsToWindow",
"onafterprint",
"onbeforeprint",
"onbeforeunload",
"onhashchange",
"onlanguagechange",
"onmessage",
"onmessageerror",
"onoffline",
"ononline",
"onpagehide",
"onpageshow",
"onpopstate",
"onrejectionhandled",
"onstorage",
"onunhandledrejection",
"onunload",
"onblur",
"onerror",
"onfocus",
"onload",
"onresize",
"onscroll",
//"_initGlobalEvents",
//"_getEventHandlerTarget",
//"_getEventHandlerFor",
//"_setEventHandlerFor",
//"_globalEventChanged",
"onabort",
//"onautocomplete",
//"onautocompleteerror",
"oncancel",
"oncanplay",
"oncanplaythrough",
"onchange",
"onclick",
"onclose",
"oncontextmenu",
"oncuechange",
"ondblclick",
"ondrag",
"ondragend",
"ondragenter",
//"ondragexit",
"ondragleave",
"ondragover",
"ondragstart",
"ondrop",
"ondurationchange",
"onemptied",
"onended",
"oninput",
"oninvalid",
"onkeydown",
"onkeypress",
"onkeyup",
"onloadeddata",
"onloadedmetadata",
"onloadstart",
"onmousedown",
"onmouseenter",
"onmouseleave",
"onmousemove",
"onmouseout",
"onmouseover",
"onmouseup",
"onwheel",
"onpause",
"onplay",
"onplaying",
"onprogress",
"onratechange",
"onreset",
//"onsecuritypolicyviolation",
"onseeked",
"onseeking",
"onselect",
//"onsort",
"onstalled",
"onsubmit",
"onsuspend",
"ontimeupdate",
"ontoggle",
"onvolumechange",
"onwaiting",
//"_registeredHandlers",
//"_eventHandlers",
"DOMException",
"NamedNodeMap",
"Attr",
"Node",
"Element",
"DocumentFragment",
"HTMLDocument",
"Document",
"XMLDocument",
"CharacterData",
"Text",
"CDATASection",
"ProcessingInstruction",
"Comment",
"DocumentType",
"DOMImplementation",
"NodeList",
"HTMLCollection",
"HTMLOptionsCollection",
"DOMStringMap",
"DOMTokenList",
"SVGAnimatedString",
"SVGNumber",
"SVGStringList",
"Event",
"CloseEvent",
"CustomEvent",
"MessageEvent",
"ErrorEvent",
"HashChangeEvent",
"InputEvent",
"FocusEvent",
"PopStateEvent",
"UIEvent",
"MouseEvent",
"KeyboardEvent",
"TouchEvent",
"ProgressEvent",
"StorageEvent",
"CompositionEvent",
"WheelEvent",
"EventTarget",
"BarProp",
"Location",
"History",
"Screen",
"Performance",
"Blob",
"File",
"FileList",
"ValidityState",
"DOMParser",
"XMLSerializer",
"FormData",
"XMLHttpRequestEventTarget",
"XMLHttpRequestUpload",
"NodeIterator",
"TreeWalker",
"Storage",
"ShadowRoot",
"HTMLElement",
"HTMLAnchorElement",
"HTMLAreaElement",
"HTMLAudioElement",
"HTMLBaseElement",
"HTMLBodyElement",
"HTMLBRElement",
"HTMLButtonElement",
"HTMLCanvasElement",
"HTMLDataElement",
"HTMLDataListElement",
"HTMLDetailsElement",
"HTMLDialogElement",
"HTMLDirectoryElement",
"HTMLDivElement",
"HTMLDListElement",
"HTMLEmbedElement",
"HTMLFieldSetElement",
"HTMLFontElement",
"HTMLFormElement",
"HTMLFrameElement",
"HTMLFrameSetElement",
"HTMLHeadingElement",
"HTMLHeadElement",
"HTMLHRElement",
"HTMLHtmlElement",
"HTMLIFrameElement",
"HTMLImageElement",
"HTMLInputElement",
"HTMLLabelElement",
"HTMLLegendElement",
"HTMLLIElement",
"HTMLLinkElement",
"HTMLMapElement",
"HTMLMarqueeElement",
"HTMLMediaElement",
"HTMLMenuElement",
"HTMLMetaElement",
"HTMLMeterElement",
"HTMLModElement",
"HTMLObjectElement",
"HTMLOListElement",
"HTMLOptGroupElement",
"HTMLOptionElement",
"HTMLOutputElement",
"HTMLParagraphElement",
"HTMLParamElement",
"HTMLPictureElement",
"HTMLPreElement",
"HTMLProgressElement",
"HTMLQuoteElement",
"HTMLScriptElement",
"HTMLSelectElement",
"HTMLSlotElement",
"HTMLSourceElement",
"HTMLSpanElement",
"HTMLStyleElement",
"HTMLTableCaptionElement",
"HTMLTableCellElement",
"HTMLTableColElement",
"HTMLTableElement",
"HTMLTimeElement",
"HTMLTitleElement",
"HTMLTableRowElement",
"HTMLTableSectionElement",
"HTMLTemplateElement",
"HTMLTextAreaElement",
"HTMLTrackElement",
"HTMLUListElement",
"HTMLUnknownElement",
"HTMLVideoElement",
"SVGElement",
"SVGGraphicsElement",
"SVGSVGElement",
"StyleSheet",
"MediaList",
"CSSStyleSheet",
"CSSRule",
"CSSStyleRule",
"CSSMediaRule",
"CSSImportRule",
"CSSStyleDeclaration",
"StyleSheetList",
//"XPathException",
"XPathExpression",
"XPathResult",
"XPathEvaluator",
"NodeFilter",
"URL",
"URLSearchParams",
"Window",
//"_resourceLoader",
//"_globalProxy",
//"_document",
//"_sessionHistory",
//"_virtualConsole",
//"_runScripts",
//"_top",
//"_parent",
//"_frameElement",
//"_length",
//"_pretendToBeVisual",
//"_storageQuota",
//"_commonForOrigin",
//"_currentOriginData",
//"_localStorage",
//"_sessionStorage",
"length",
"window",
"frameElement",
"frames",
"self",
"parent",
"top",
"document",
"external",
"location",
"history",
"navigator",
"locationbar",
"menubar",
"personalbar",
"scrollbars",
"statusbar",
"toolbar",
"performance",
"screen",
"localStorage",
"sessionStorage",
"addEventListener",
"removeEventListener",
"dispatchEvent",
"setTimeout",
"setInterval",
"clearInterval",
"clearTimeout",
//"__stopAllTimers",
"Option",
"Image",
"Audio",
"postMessage",
"atob",
"btoa",
"FileReader",
"WebSocket",
"AbortSignal",
"AbortController",
"XMLHttpRequest",
"ArrayBuffer",
"Int8Array",
"Uint8Array",
"Uint8ClampedArray",
"Int16Array",
"Uint16Array",
"Int32Array",
"Uint32Array",
"Float32Array",
"Float64Array",
"stop",
"close",
"getComputedStyle",
"captureEvents",
"releaseEvents",
"console",
"name",
"status",
"devicePixelRatio",
"innerWidth",
"innerHeight",
"outerWidth",
"outerHeight",
"pageXOffset",
"pageYOffset",
"screenX",
"screenY",
"scrollX",
"scrollY",
"screenLeft",
"screenTop",
"alert",
"blur",
"confirm",
"focus",
"moveBy",
"moveTo",
"open",
"print",
"prompt",
"resizeBy",
"resizeTo",
"scroll",
"scrollBy",
"scrollTo"
];

if ( theOutput.indexOf('node') >= 0 ) {
	// check core js
	// check standard node properties and modules
	
	checkNodeGLobalProperties.forEach(function(value){
    if ( typeof global[value] == 'undefined' )
		  log(value,typeof global[value]);
  });
  
	checkNodeBrowserCommonProperties.forEach(function(value){
    if ( typeof global[value] == 'undefined' )
		  log(value,typeof global[value]);
	});
}

if ( theOutput.indexOf('browser') >= 0 ) {
	// check core js
  // check standard dom properties
  
  if ( typeof window !== 'undefined' ) {
    /*
    checkNodeGLobalProperties.forEach(function(value){
      if ( typeof window[value] == 'undefined')
        log(value,typeof window[value]);
    });
    //*/
    checkNodeBrowserCommonProperties.forEach(function(value){
      if ( typeof window[value] == 'undefined')
        log(value,typeof window[value]);
    });
    /*
    checkJSDOMdomWindowProperties.forEach(function(value){
      if ( typeof window[value] == 'undefined')
        log(value,typeof window[value]);
    });
    //*/
    checkJSDOMdomWindowBrowserCommonProperties.forEach(function(value){
      if ( typeof window[value] == 'undefined')
      log(value,typeof window[value]);
    });
  }
}

// browser chrome
// window properties length : 823
// checkJSDOMdomWindowBrowserCommonProperties length : 309
// window not core not jsdoom length : 477

//console.log(JSON.stringify());
//checkJSDOMdomWindowBrowserCommonProperties.filter(function(value){return windowProperties.indexOf(value) > 0;});
//checkJSDOMdomWindowBrowserCommonProperties.filter(function(value){return windowProperties.indexOf(value) > 0 ? true : false;});
//checkJSDOMdomWindowBrowserCommonProperties.filter(function(value){return windowProperties.indexOf(value) > 0 ? false : true;});
// addEventListener,function
// removeEventListener,function
// dispatchEvent,function

// browser chrome, browser not jsdom
//windowProperties.filter(function(value){return checkJSDOMdomWindowBrowserCommonProperties.indexOf(value) > 0 ? false : true;});

// browser chrome, browser and jsdom
//windowProperties.filter(function(value){return checkJSDOMdomWindowBrowserCommonProperties.indexOf(value) > 0 ? true : false;});

//check1 = checkJSDOMdomWindowBrowserCommonProperties.filter(function(value){return windowProperties.indexOf(value) > 0 ? true : false;});
//check2 = windowProperties.filter(function(value){return checkJSDOMdomWindowBrowserCommonProperties.indexOf(value) > 0 ? true : false;});
//check1.forEach(function(value){if ( check2.indexOf(value) === -1 ) { console.log(value,false); } else { console.log(value,true); } });
//check1.forEach(function(value){if ( check2.indexOf(value) === -1 ) { console.log(value,false); } else {  } });
//onafterprint,false
//check1.forEach(function(value){if ( check2.indexOf(value) === -1 ) {  } else { console.log(value,true); } });
//check2.forEach(function(value){if ( check1.indexOf(value) === -1 ) { console.log(value,false); } else {  } });
//check2.forEach(function(value){if ( check1.indexOf(value) === -1 ) {  } else { console.log(value,true); } });

//windowProperties.filter(function(value){return checkJSDOMdomWindowBrowserCommonProperties.concat(checkNodeBrowserCommonProperties).indexOf(value) > 0 ? false : true;});
